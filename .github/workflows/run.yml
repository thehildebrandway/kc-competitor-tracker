name: Weekly IG Competitor Tracker (Apify)

on:
  schedule:
    - cron: '0 16 * * 1'   # Mondays 08:00 PT (16:00 UTC)
  workflow_dispatch:
  push:                    # optional: keeps a convenient first-run trigger

permissions:
  contents: write

jobs:
  run-tracker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install pandas python-dateutil pytz requests

      - name: Run Apify Instagram Scraper for all handles
        env:
          APIFY_TOKEN: ${{ secrets.APIFY_TOKEN }}
        run: |
          python - << 'PY'
          import os, json, time, requests, pandas as pd
          from datetime import datetime, timedelta

          token = os.environ["APIFY_TOKEN"]
          # Read handles
          handles = [h.strip() for h in open("competitors.csv") if h.strip()]

          # Apify actor: apify/instagram-scraper
          # We'll run once with all usernames. Limit results to last 60 days just to be safe.
          since_dt = datetime.utcnow() - timedelta(days=60)

          input_payload = {
              "usernames": handles,           # list of usernames without @
              "resultsType": "posts",
              "resultsLimit": 200,           # total cap (actor-level)
              "includeCommentCount": True,
              "includeLikeCount": True,
              "includeCaption": True,
              "scrollWaitSecs": 1
          }

          run_url = f"https://api.apify.com/v2/acts/apify~instagram-scraper/run-sync-get-dataset-items?token={token}"
          r = requests.post(run_url, json=input_payload, timeout=600)
          r.raise_for_status()
          items = r.json()

          rows = []
          for it in items:
              # Skip if not a post item
              if it.get("type") not in ("Post","Reel","Carousel"):
                  continue
              username = it.get("ownerUsername") or ""
              url = it.get("url") or ""
              caption = (it.get("caption") or "").replace("\n"," ").strip()
              likes = it.get("likesCount") or 0
              comments = it.get("commentsCount") or 0
              ts = it.get("timestamp") or it.get("takenAtTimestamp")
              # Normalize time
              try:
                  published_at = datetime.fromtimestamp(ts).strftime("%Y-%m-%dT%H:%M:%SZ")
                  dt_utc = datetime.fromtimestamp(ts)
              except Exception:
                  published_at, dt_utc = "", None
              if dt_utc and dt_utc < since_dt:
                  continue

              # Guess type
              _type = "reel" if it.get("isVideo") else ("carousel" if (it.get("imagesCount") or 0) > 1 else "image")
              followers = it.get("ownerFollowersCount") or 0
              er = round((likes + comments)/followers, 4) if followers else 0.0
              hook_text = " ".join(caption.split()[:10])

              rows.append({
                  "platform":"instagram",
                  "profile":"@"+username if username else "",
                  "post_url": url,
                  "published_at": published_at,
                  "type": _type,
                  "caption": caption[:500],
                  "hook_text": hook_text,
                  "likes": likes,
                  "comments": comments,
                  "followers_snapshot": followers,
                  "est_engagement_rate": er
              })

          df = pd.DataFrame(rows)
          df.sort_values("published_at", ascending=False, inplace=True)
          df.to_csv("posts_raw.csv", index=False)
          print(f"Wrote {len(df)} rows to posts_raw.csv")
          PY

      - name: Commit CSV to repo
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add posts_raw.csv
          git commit -m "chore: update posts_raw.csv [skip ci]" || echo "No changes to commit"
          git push
