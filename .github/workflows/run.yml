      - name: Run Apify Instagram Scraper for all handles
        env:
          APIFY_TOKEN: ${{ secrets.APIFY_TOKEN }}
        run: |
          python - << 'PY'
          import os, json, requests, pandas as pd
          from datetime import datetime, timedelta

          token = os.environ.get("APIFY_TOKEN", "")
          if not token or len(token) < 10:
              raise SystemExit("APIFY_TOKEN is missing or invalid. Add it as a repo secret.")

          # Read IG handles (one per line, no @)
          handles = [h.strip() for h in open("competitors.csv") if h.strip()]

          # Call Apify actor
          ACTOR = "apify~instagram-scraper"
          url = f"https://api.apify.com/v2/acts/{ACTOR}/run-sync-get-dataset-items"
          headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}

          payload = {
              "usernames": handles,
              "resultsType": "posts",
              "resultsLimit": 200,
              "includeCommentCount": True,
              "includeLikeCount": True,
              "includeCaption": True,
              "scrollWaitSecs": 1
          }

          r = requests.post(url, headers=headers, json=payload, timeout=600)
          if r.status_code == 401:
              raise SystemExit("Apify 401 Unauthorized: token wrong/expired. Create a fresh APIFY_TOKEN secret.")
          r.raise_for_status()
          items = r.json()

          since_dt = datetime.utcnow() - timedelta(days=60)

          def normalize_ts(it):
              # Try multiple fields Apify may return
              for k in ("timestamp","takenAtTimestamp","taken_at_timestamp"):
                  v = it.get(k)
                  if isinstance(v, (int, float)):
                      return datetime.utcfromtimestamp(v)
                  # ISO string case
                  if isinstance(v, str):
                      try:
                          return datetime.fromisoformat(v.replace("Z","+00:00")).replace(tzinfo=None)
                      except Exception:
                          pass
              return None

          rows = []
          for it in items or []:
              t = it.get("type") or ""
              if t not in ("Post","Reel","Carousel"):
                  continue

              uname = (it.get("ownerUsername") or "").strip("@")
              dt_utc = normalize_ts(it)
              if dt_utc and dt_utc < since_dt:
                  continue

              caption = (it.get("caption") or "").replace("\n"," ").strip()
              likes = int(it.get("likesCount") or 0)
              comments = int(it.get("commentsCount") or 0)
              followers = int(it.get("ownerFollowersCount") or 0)
              url_post = it.get("url") or ""

              # Decide type
              is_video = bool(it.get("isVideo"))
              images_count = int(it.get("imagesCount") or 0)
              ptype = "reel" if is_video else ("carousel" if images_count > 1 else "image")

              rows.append({
                  "platform":"instagram",
                  "profile": f"@{uname}" if uname else "",
                  "post_url": url_post,
                  "published_at": dt_utc.strftime("%Y-%m-%dT%H:%M:%SZ") if dt_utc else "",
                  "type": ptype,
                  "caption": caption[:500],
                  "hook_text": " ".join(caption.split()[:10]),
                  "likes": likes,
                  "comments": comments,
                  "followers_snapshot": followers,
                  "est_engagement_rate": round((likes+comments)/followers,4) if followers else 0.0
              })

          # Guarantee a non-empty CSV with headers
          cols = ["platform","profile","post_url","published_at","type","caption","hook_text","likes","comments","followers_snapshot","est_engagement_rate"]
          df = pd.DataFrame(rows, columns=cols)

          # Sort only if we actually have any published_at values
          if "published_at" in df.columns and df["published_at"].notna().any():
              df = df.sort_values("published_at", ascending=False, na_position="last")

          if df.empty:
              df.loc[0] = ["instagram","","","","","","NO DATA RETURNED",0,0,0,0.0]

          df.to_csv("posts_raw.csv", index=False)
          print(f"Wrote {len(df)} rows to posts_raw.csv")
          PY
